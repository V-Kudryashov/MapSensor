// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel terrainCamera

RWStructuredBuffer<float> map;
RWStructuredBuffer<float> frame;
RWStructuredBuffer<float2> transform;
RWStructuredBuffer<int> offset;


[numthreads(8,8,1)]
void terrainCamera(uint3 id : SV_DispatchThreadID)
{
    float cx = transform[0].x;
    float cy = transform[0].y;
    float sin = transform[1].x;
    float cos = transform[1].y;

    int dw = offset[0];
    int dh = offset[1];
    int mapW = offset[2];
    int mapH = offset[3];
    int fraimH = offset[4];
    int ch = offset[5];

    int w1 = ((int)id.x) + dw;
    int h1 = ((int)id.y) + dh;
    float x = cx + (w1 * cos - h1 * sin);
    float y = cy - (w1 * sin + h1 * cos);

    int x1 = (int)x;
    int y1 = (int)y;
    int x2 = x1 + 1;
    int y2 = y1 + 1;

    x = x - x1;
    y = y - y1;
    float k11 = (1 - x) * (1 - y);
    float k12 = (1 - y) * x;
    float k21 = y * (1 - x);
    float k22 = x * y;

    float m11 = map[id.z + ch * (x1 + mapW * y1)];
    float m21 = map[id.z + ch * (x1 + mapW * y2)];
    float m12 = map[id.z + ch * (x2 + mapW * y1)];
    float m22 = map[id.z + ch * (x2 + mapW * y2)];


    float value = k11 * m11 + k12 * m12 + k21 * m21 + k22 * m22;
    if (id.x < 3 && id.y < 3 && id.z < 3)
        value = -1;

    frame[id.z + ch * (id.x + fraimH * id.y)] = value;
}
